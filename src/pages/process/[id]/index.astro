---
import ProcessLayout from "@layouts/ProcessLayout.astro";
//import { fetchProcess } from "@services/api";
import getProcessUrl from "@utils/getProcessUrl";
import { Translator } from '@utils/i18n.js';
const translator = new Translator(Astro.currentLocale || 'en');

const { url } = Astro;
const processId = Astro.params.id as string;
const process: any = {};
//const process = await fetchProcess(processId);
const pathname = `${Astro.currentLocale === "en" ? "" : `/${Astro.currentLocale}`}${getProcessUrl(process, processId)}`;
if (pathname !== url.pathname)
    return Astro.redirect(pathname);
---

<ProcessLayout process={process}>
    { process && +new Date() >= process.proposalDates[1] && +new Date() < process.votingDates[0] &&
    <div>
        <h2>{ translator.t('process.proposals') }</h2>
        <proposal-list  data-proposals={process.proposals}>
            <div class="proposals-container"></div>
        </proposal-list>
    </div>
    }

</ProcessLayout>

<script>
import getQuillHTML from '@utils/getQuillHTML';
//import {fetchProcess} from '@services/api';
/*
const processId = window.location.pathname.split('/process/')[1].split('/')[0]
const process = await fetchProcess(processId);
const proposalStart = process.proposalDates[0]
const votingStart = process.votingDates[0]


const redirectToPage = (startTime: number, pageName: string) => {
    if (+new Date() < startTime) {
        const time = startTime - +new Date();
        setTimeout(() => {
            window.location.href = `/process/${processId}/${pageName}`;
        }, time);
    }
}
redirectToPage(proposalStart, 'proposals')
redirectToPage(votingStart, 'voting')


class ProposalList extends HTMLElement {
    constructor() {
        super();
    }

    connectedCallback() {
        this.render();
    }

    render() {
        const proposals = JSON.parse(this.getAttribute("data-proposals") || "[]");
        const proposalsContainer = this.querySelector(".proposals-container") as HTMLElement;
        
        let proposalsHTML = '';

        proposals.forEach((proposal: any) => {
            proposalsHTML += `
                <div>
                <h3>${proposal.title}</h3>
                <p>${getQuillHTML(proposal.description)}</p>
                </div>
                <br/>
            `;
        });

        proposalsContainer.innerHTML = proposalsHTML;
    }
}

customElements.define("proposal-list", ProposalList);*/

</script>