---
import ProcessLayout from "@layouts/ProcessLayout.astro";
import getProcessUrl from "@utils/getProcessUrl";
import AddProposals from "@components/process/ProposalsList.astro";
import { Translator } from '@utils/i18n.js';
const translator = new Translator(Astro.currentLocale || 'en');
await translator.init();

import fetchProcessData from '@utils/fetchProcessData';
import ProposalsList from "@components/process/ProposalsList.astro";


const { url } = Astro;
const processId: any = Astro.params.id;
const process = await fetchProcessData(processId);
const pathname = `${Astro.currentLocale === "en" ? "" : `/${Astro.currentLocale}`}${getProcessUrl(process)}`;
if (pathname !== url.pathname)
    return Astro.redirect(pathname);

const proposals = process.proposals ? process.proposals : [];

---

<ProcessLayout process={process}>
  <ProposalsList proposals={proposals}/>

  <!--proposal-list data-process={JSON.stringify(process)}>
    <h2>{ translator.t('process.proposals') }</h2>
    <div class="proposals">
      <div class="proposal card outline outline-1 shadow-xl py-2 px-4 my-4">
        <div class="view flex justify-between items-center cursor-pointer">
          <div class="content flex flex-col w-full">
            <div class="flex flex-col"/>
            <div class="flex">
              <button name="edit" class="btn btn-primary  btn-sm mx-2">{ translator.t('edit') }</button>
            </div>
            <br/>
          </div>
        </div>
        <div class="edit flex justify-between items-center" style="display: none;">
          <div class="content flex flex-col w-full">
            <h3>{ translator.t('process.proposal') }</h3>
            <input type="text" class="input input-bordered input-sm my-2"/>
            <br/>
            <h4>{ translator.t('process.description') }</h4>
            <br/>
            <div class="quill"/>
            <br/>
            <div class="flex">
              <button name="save" class="btn btn-primary btn-sm mx-2">
                { translator.t('save') }
              </button>
              <button name="delete" class="btn btn-ghost text-error btn-sm mx-2">
                { translator.t('delete') }
              </button>
            </div>
            <br/>
          </div>
        </div>
      </div>
    </div>
  </proposal-list--> 
</ProcessLayout>

<script>
  /*
import type IProposal from '@interfaces/IProposal';
import { createQuill, updateQuill } from '@utils/quillUtils';
import getQuillHTML from '@utils/getQuillHTML'
import type Delta from 'quill-delta';

const processId = window.location.pathname.split('/process/')[1].split('/')[0]

class ProposalList extends HTMLElement {
  proposals = this.querySelector('div.proposals') as HTMLElement;
  proposal_html = (this.proposals.querySelector('div.proposal') as HTMLElement).cloneNode(true);
  descriptionQuills = {}
  currentAlert = null
  process = JSON.parse(this.getAttribute("data-process") || "{}");
  alertList = this.querySelector('div.alert-list') as HTMLElement;
  alerts = this.querySelectorAll('alert-element') as NodeListOf<HTMLElement>;

  async updateProposalAPI(method: any, data: any) {
    const url = `/api/process/${processId}/proposal/${data.id}`;
    const options = {
      method: method === 'delete' ? 'DELETE' : 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    };
    await fetch(url, options);
  }

  updateProposalView(proposal: any, title: string, description: Delta ) {
    const view_content = proposal.querySelector('div.view').querySelector('div.content').querySelector('.flex')
    view_content.innerHTML = `
      <h3>${title}</h3>
      <div>${getQuillHTML(description )}</div>`
  }
  
  updateProposalEdit(proposal: any, title: string, description: Delta): HTMLInputElement {
    const edit_content = proposal.querySelector('div.edit').querySelector('div')
    const inputs = [
      edit_content.querySelector("input") as HTMLInputElement,
      edit_content.querySelector(".quill") as HTMLInputElement,
    ];
    inputs[0].value = title
    this.descriptionQuills[inputs[1].id] = updateQuill(this.descriptionQuills[inputs[1].id], description)
    return inputs[1]
  }
  
  async updateProposal(inputs: { titleInput: HTMLInputElement; descriptionElement: HTMLElement }, proposal: HTMLElement): Promise<void> {
    const { titleInput, descriptionElement } = inputs;
    const descriptionContent = this.descriptionQuills[descriptionElement.id].getContents();
    const isEmptyDescription = JSON.stringify(descriptionContent) === '{"ops":[{"insert":"\\n"}]}';

    const proposalId = proposal.id;
    const title = titleInput.value;

    if (title === '' && isEmptyDescription) {
      try {
        await this.updateProposalAPI('delete', { id: proposalId });
      } catch (error) {
        console.error('Error deleting proposal:', error);
      }
    } else {
      try {
        await this.updateProposalAPI('put', {
          id: proposalId,
          title,
          description: descriptionContent
        });
      } catch (error) {
        console.error('Error updating proposal:', error);
      }
    }

    this.updateProposalView(proposal, title, descriptionContent);
  }

  addProposal(data: IProposal, editing: boolean = false): void {
    const proposal = this.proposal_html.cloneNode(true) as HTMLElement;
    proposal.id = data.id;

    const view = proposal.querySelector('div.view') as HTMLElement;
    const edit = proposal.querySelector('div.edit') as HTMLElement;

    if (editing) {
      view.style.display = 'none';
      edit.style.display = 'flex';
    }

    view.addEventListener('click', () => {
      view.style.display = 'none';
      edit.style.display = 'flex';
    });

    const editContent = edit.querySelector('div') as HTMLElement;
    const titleInput = editContent.querySelector('input') as HTMLInputElement;
    const descriptionElement = editContent.querySelector('.quill') as HTMLElement;

    titleInput.value = data.title;
    const proposalId = data.id;

    const descriptionId = `quill-${proposalId}`;
    descriptionElement.id = descriptionId;

    const saveButtons = Array.from(edit.querySelectorAll('button')) as HTMLButtonElement[];
    saveButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        if (btn.name === 'delete') {
          titleInput.value = '';
          const quillInstance = this.descriptionQuills[descriptionElement.id];
          if (quillInstance) {
            quillInstance.setText('');
          }
        }

        view.style.display = 'flex';
        edit.style.display = 'none';

        this.updateProposal({ titleInput, descriptionElement }, proposal);
      });
    });

    this.proposals.appendChild(proposal);

    // Create a Quill editor for the description field
    let quill = createQuill('#' + descriptionId);
    quill = updateQuill(quill, data.description)

    this.updateProposalView(proposal, data.title, quill);
    this.descriptionQuills[descriptionId] = quill;

    titleInput.addEventListener('input', () => {
        this.updateProposal({ titleInput, descriptionElement }, proposal);
    });
  }


  constructor() {
    super();
    // Find the proposals container and clone a proposal template.
    this.proposals.innerHTML = "";
    // Add existing proposals to the UI.
    if (this.process.proposals) {
      const proposals = Object.values(this.process.proposals) as any[];
      console.log(proposals)
      proposals.forEach((proposal: any) => {
        this.addProposal(proposal);
      });

    }
    // Listen for changes to the proposals data from the API
    const eventSource = new EventSource(`/api/process/${processId}/proposals`);
    eventSource.onmessage = (event) => {
      const proposals = JSON.parse(event.data);

      for (const proposalId in proposals) {
        const proposal = proposals[proposalId];
        const existingProposalElement = Array.from(this.proposals.children).find((child: any) => child.id === proposalId);

        if (existingProposalElement) {
          this.updateProposalEdit(existingProposalElement, proposal.title, proposal.description);
          this.updateProposalView(existingProposalElement, proposal.title, proposal.description);
        } else {
          this.addProposal({ ...proposal, id: proposalId });
        }
      }

      
      // Remove proposals that no longer exist
      Array.from(this.proposals.children).forEach((child: any) => {
        if (!proposals[child.id]) {
          this.proposals.removeChild(child);
        }
      });


    const checkTime = () => {
      const time =  this.process.proposalDates[1] - +new Date()
      if (time <= 0)
        window.location.href = `${window.location.origin}/process/${processId}/voting`
      else
        setTimeout(checkTime, time)
    }
    checkTime()

    };
  }
}
customElements.define('proposal-list', ProposalList)


  
*/
</script>