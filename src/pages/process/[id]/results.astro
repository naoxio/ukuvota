---
import type IProcess from "@interfaces/IProcess";
import ProcessLayout from "@layouts/ProcessLayout.astro";
import { Icon } from "astro-icon";
import getProcessUrl from "@utils/getProcessUrl";
import { Translator } from '@utils/i18n.js';
import fetchProcessData from '@utils/fetchProcessData';   

const translator = new Translator(Astro.currentLocale || 'en');

const { url } = Astro;
const processId: any = Astro.params.id;
const process: IProcess = await fetchProcessData(processId);
const pathname = `${Astro.currentLocale === "en" ? "" : `/${Astro.currentLocale}`}${getProcessUrl(process)}`;
if (pathname !== url.pathname)
    return Astro.redirect(pathname);
const emojis = ["rage", "angry", "sad", "neutral", "smiling", "happy", "loving"];
if (process && !("voters" in process)) {
    process.voters = [];
}
---
<style>
    .hide {
        display: none;
    }
</style>
<ProcessLayout process={process}>
    <results-card data-process={JSON.stringify(process)}>
        <div class="hide">
            { emojis.map(emoji => (
                <Icon class="emoji" name={emoji} width="48" />
            ))}
        </div>


        { !process.voters || process.voters.length == 0 && (
        <div class="text-center text-warning">
            <p>{ translator.t('process.noVotesSubmitted') }</p>
        </div>
        )}
        {process.proposals && Object.keys(process.proposals).length > 0 ? (

            <div>
                <div role="tablist" class="tabs tabs-bordered">
                    <a role="tab" class="tab tab-bordered tab-active w-full h-12"><Icon width="16" name="face-cool"/></a> 
                    <a role="tab" class="tab tab-bordered w-full h-12"><Icon width="16" name="list"/></a> 
                </div>

                <div class="tab-custom-content hide">
                    <span class="flex justify-between items-center">
                        <h2>{ translator.t('process.results') }</h2>
                        <!--button class='repeat-button btn btn-sm'>{ translator.t('repeatProcess') }</button-->
                    </span>
                    <h3>
                        <span class="voter-label">{ translator.t('process.voters') }</span>
                        <span class="num-voters">({ process.voters?.length })</span>:
                    </h3>
                    <div class="flex justify-around flex-wrap">
                        { process.voters?.map((voter: any) => (
                            <div id={voter.id} class="flex items-center p-2 voter">
                                <input type="checkbox" checked class="checkbox checkbox-xs" />
                                <span class="p-1 cursor-pointer select-none">
                                    { voter.name }
                                </span>
                            </div>
                        ))}
                    </div>
                    <br/>
                    <div class="overflow-x-auto">
                        <table class="table w-full">
                            <!-- head -->
                            <thead>
                                <tr class="table-row-one">
                                    <th></th>
                                    <th class="whitespace-normal break-words">{ translator.t('process.proposal') }</th>
                                    <th class="whitespace-normal break-words">{ translator.t('process.averageScore') }</th>
                                    <th class="whitespace-normal break-words">{ translator.t('process.totalScore') }</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <br/>
                    <div class="card">
                        <h3>{ translator.t('process.exportData') }</h3>
                        <div class="flex justify-around exports">
                            <button class="export-markdown btn btn-ghost"><Icon width="28" name="document-download"/></button>
                            <button class="export-image btn btn-ghost"><Icon width="28" name="camera" /></button>
                        </div>
                    </div> 
                </div>
                <div class="tab-custom-content hide">
                    <div>
                        <br/>
                        <br/>
                        <div class="overflow-x-auto">
                            <table class="table w-full">
                                <!-- head -->
                                <thead>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>
                        <br/>
                    </div>
                </div>
            </div>
        ) : (
            <div class="text-center">
                <h2>{ translator.t('process.noProposalsSubmitted') }</h2>
            </div>
        )}
    </results-card>
</ProcessLayout>



<script>
/* @ts-ignore */
import download from 'downloadjs';
import type IProcess from '@interfaces/IProcess';
import { toPng } from 'html-to-image';
import addAlert from '@utils/addAlert';
import getQuillHTML from '@utils/getQuillHTML';
import { isProposalEmpty, truncateTitle } from '@utils/proposalUtils';


const save = (filename: string, data: any, type: string): void => {
    const blob = new Blob([data], {type});

    const elem = window.document.createElement('a');
    elem.href = window.URL.createObjectURL(blob);
    elem.download = filename;        
    document.body.appendChild(elem);
    elem.click();        
    document.body.removeChild(elem);
}

const getHighlighting = (className: string) => {
    switch (className) {
        case "color-0":
            return "rgba(205, 92, 92, 0.3)";
        case "color-1":
            return "rgba(205, 92, 92, 0.2)";
        case "color-2":
            return "rgba(205, 92, 92, 0.1)";
        default:
            return "";
    }
};

class ResultsCard extends HTMLElement {
    voter_list: NodeListOf<HTMLDivElement> = this.querySelectorAll('div.voter')
    table_body = this.querySelectorAll('tbody')  as NodeListOf<HTMLElement>;
    table_head: NodeListOf<HTMLElement> = this.querySelectorAll('thead');                                                                                                                                                                                                                   
    emojis = this.querySelectorAll('svg.emoji') as NodeListOf<HTMLElement>;
    alertList = this.querySelector('div.alert-list') as HTMLElement;
    alerts = this.querySelectorAll('alert-element') as NodeListOf<HTMLElement>;
    process: IProcess = JSON.parse(this.getAttribute('data-process') || '{}');

    getTotal(proposalId: string, selectedVoters: any) {
        return selectedVoters.reduce((sum: number, voter: any) => {
            const process_voter = this.process.voters?.find((vote: any) => vote.id === voter.id)
            const matchingVote = process_voter?.votes.find((vote: any) => vote.proposalId === proposalId);
            if (matchingVote) {
                let v = matchingVote.vote;
                if (v < 0)
                    v *= Number(this.process.weighting);
                return sum + v;
            }
        
            return sum;
        }, 0);
    };

    getAverageScore(total: number, voters: any) {
        if (voters.length > 0) {
            let i = total / voters.length;
            return Math.round(i * 100) / 100
        }
        return 0
    }

    getAverageEmoji(total: number, voters: any) {
        let i = this.getAverageScore(total, voters)
        if (i < 0)
            i /= Number(this.process.weighting);
        i = Math.round(i)
        return this.emojis[i + 3];
    };
    
    updateTable() {
        const selectedVoters = this.getSelectedVoters();
        const proposals = this.process.proposals ? Object.values(this.process.proposals) : []; // Convert proposals object to an array
        const numVotersElement = this.querySelector('span.num-voters') as HTMLElement;
        if (numVotersElement) numVotersElement.innerHTML = `(${selectedVoters.length})`;
        proposals.forEach((proposal: any) => {
            proposal['total'] = this.getTotal(proposal.id, selectedVoters);
        });
        const sortedProposals = proposals.sort((a: any, b: any) => {
            return b.total - a.total;
        });
        if (this.table_body[0]) this.table_body[0].innerHTML = '';
        if (this.table_body[1]) this.table_body[1].innerHTML = '';

        let head_content = `<th>voter</th>`; // TODO: translate
        proposals.forEach(proposal => {
            if (isProposalEmpty(proposal)) return;
            const truncatedTitle = truncateTitle(proposal.title, 50);
            head_content += `<th>${truncatedTitle}</th>\n`;
        });
        let body_content = '';

        this.process.voters?.forEach((voters: any) => {
            body_content += `
            <tr>
            <td>
                <span>${voters.name}</span>
            </td>\n`;
            proposals.forEach(proposal => {
                if (!proposal.id) return;
                if (isProposalEmpty(proposal)) return;
                let vote = voters.votes.find((p: any) => p.proposalId == proposal.id).vote;
                body_content += `<th class="text-center">${vote}</th>\n`;
            });
            body_content += '</tr>\n';
        });


        if (this.table_head[1]) this.table_head[1].innerHTML = head_content;
        if (this.table_body[1]) this.table_body[1].innerHTML = body_content;

        let rank = 0;
        let prevProposal: any = null;
        sortedProposals.forEach((proposal: any, index: number) => {
            if (isProposalEmpty(proposal)) return;

            if (prevProposal) {
                rank += prevProposal.total === proposal.total ? 0 : 1;
            }
            prevProposal = proposal;

            this.table_body[0].appendChild(this.createRow(rank, index, proposal, selectedVoters));
        });
        if (this.table_body[0]) {
            const items = this.table_body[0].querySelectorAll('tr');
            items.forEach((item) => {
                const rows = item.querySelectorAll('td');
                rows.forEach((row) => {
                    row.style.backgroundColor = getHighlighting(item.className);
                });
            });
        }
    }

    createRow(rank: number, index: number, proposal: any, selectedVoters: any[]) {
        const description = getQuillHTML(proposal.description);
        const truncatedTitle = truncateTitle(proposal.title, 50);
        const isTitleTruncated = proposal.title !== truncatedTitle;

        const row = document.createElement('tr');
        row.className = 'color-' + rank;
        row.innerHTML = `
            <td class='select-for-repeat cursor-pointer'>
            <!--input id="${proposal.id}" type="checkbox" class="checkbox checkbox-xs" /-->
            </td>
            <td class="whitespace-normal break-words">
            <h3 class="${isTitleTruncated ? 'truncated-title' : ''}">${truncatedTitle}</h3>
            <p>${description}</p>
            </td>
            <td align="center">
            <div class="emoji-container tooltip cursor-pointer tooltip-left" data-tip=${this.getAverageScore(proposal.total, selectedVoters)}>
        `;

        const emojiContainer = row.querySelector('div.emoji-container') as HTMLElement;
        emojiContainer.insertAdjacentElement('beforeend', this.getAverageEmoji(proposal.total, selectedVoters));
        row.innerHTML += `
            </div>
            </td>
            <td align="center">${proposal.total}</td>
        `;

        const titleElement = row.querySelector('h3.truncated-title') as HTMLElement;
        if (isTitleTruncated ) {
            titleElement.addEventListener('click', () => {
            if (titleElement.classList.contains('expanded') && truncatedTitle) {
                titleElement.innerHTML = truncatedTitle;
                titleElement.classList.remove('expanded');
            } else {
                titleElement.innerHTML = proposal.title;
                titleElement.classList.add('expanded');
            }
            });
        }
/*
        const repeat = row.querySelector('td.select-for-repeat') as HTMLElement;
        repeat.addEventListener('click', (ev: any) => {
            if ('tagName' in ev.target && ev.target.tagName === 'INPUT') return;
            const input = repeat.querySelector('input') as HTMLInputElement;
            input.checked = !input.checked;
        });
*/
        return row;
        }

    getMarkdownFile() {
        const selectedVoters = this.getSelectedVoters();
        const title = this.process.title;
        const processId = this.process._id;
        let description = ''
        if (this.process.description) {
            description = getQuillHTML(this.process.description );
        }
        const voterLabelElement = this.querySelector('span.voter-label') as HTMLElement;
        const numVotersElement = this.querySelector('span.num-voters')as HTMLElement;
        const voterLabel = voterLabelElement.innerHTML ;
        const numVoters = numVotersElement.innerHTML;
        const selectedVotersString = selectedVoters.map((voter: any) => {
            const processVoter = this.process.voters?.find((vote: any) => vote.id === voter.id);
            return `${processVoter?.name} `;
        }).join('');
        const tableRowOne = this.querySelector('tr.table-row-one') as HTMLElement;
        const tableColumns = Array.from(tableRowOne.querySelectorAll('th')).map((row: any) => row.innerHTML).join(' | ');
        const proposals = this.process.proposals ? Object.values(this.process.proposals).map((proposal: any, index: number) => {
            if (isProposalEmpty(proposal)) return;
            const averageScore = this.getAverageScore(proposal.total, selectedVoters);
            return ` | ${index + 1} | ${proposal.title} - ${getQuillHTML(proposal.description)} | ${averageScore} | ${proposal.total} |`;
        }).join('\n') : '';
        
        let rtn = '';

        rtn += `# ${title}\n`;
        rtn += `${description}\n\n`;
        rtn += `${processId}\n\n`;
        rtn += `${voterLabel} ${numVoters}:\n`;
        rtn += `${selectedVotersString}\n\n`;
        rtn += `|  | ${tableColumns} |\n`;
        rtn += `| -- | -- | -- | -- |\n`;
        rtn += `${proposals}\n`;

        save(`${title}.md`, rtn, 'text/markdown');
    }

    getSelectedVoters() {
        return Array.from(this.voter_list).filter((div: HTMLDivElement) => {
            const inputElement =  div.querySelector('input') as HTMLInputElement;
            return inputElement.checked
        })
    }
    constructor() {
        super();
        const tabs = this.querySelectorAll('a.tab');
        const contents = this.querySelectorAll('div.tab-custom-content');
        for (let i = 0; i < tabs.length; i++) {
            const tab = tabs[i];
            tab.addEventListener('click', () => {
                this.showTab(tabs, contents, i);
            });
        }
        this.showTab(tabs, contents, 0);
        this.voter_list.forEach((div: HTMLDivElement) => {
            const input = div.querySelector('input') as HTMLInputElement;
            input.addEventListener('click', () => {
                this.updateTable();
            });
            const span = div.querySelector('span') as HTMLElement;
            span.addEventListener('click', () => {
                input.checked = !input.checked
                this.updateTable();
            });
        });

        this.updateTable();

        const exportMarkdownButton = this.querySelector('.export-markdown')  as HTMLButtonElement;
        const exportImageButton = this.querySelector('.export-image')  as HTMLButtonElement;
        if (exportMarkdownButton) {
            exportMarkdownButton.addEventListener('click', () => {
                this.getMarkdownFile();
            });
        }
        if (exportImageButton) {
            exportImageButton.addEventListener('click', () => {
                const theme = localStorage.getItem("theme");

                toPng(this.querySelector('div.screenshot-results') as HTMLElement, { backgroundColor: theme === 'dark' ? "black" : "white" }).then((dataUrl) => {
                    download(dataUrl, this.process.title + '.png');
                });
            });
        }
/*
        const repeatButton = this.querySelector('button.repeat-button') as HTMLButtonElement;
        if (repeatButton) {
            repeatButton.addEventListener('click', async () => {
                const items = Array.from(this.querySelectorAll('td.select-for-repeat input[type="checkbox"]')).filter((input: any) => input.checked);
                if (items.length > 1) {
                    addAlert(this.alertList, this.alerts[0]);

                    const formData = new FormData();
                    items.forEach((item) => {
                    formData.append('selectedProposals[]', item.id);
                    });

                    const response = await fetch('/api/repeat-process', {
                    method: 'POST',
                    body: formData,
                    });
                }
                else {
                    addAlert(this.alertList, this.alerts[1])
                }
            })
        }
        */
    }

    showTab(tabs: NodeListOf<Element>, contents: NodeListOf<Element>, index: number) {

        contents.forEach((content) => { if (content) content.classList.add('hide') });
        tabs.forEach((tab) => { if (tab) tab.classList.remove('tab-active') });
        if (tabs[index]) tabs[index].classList.add('tab-active');
        if (contents[index]) contents[index].classList.remove('hide');
    }

}
customElements.define('results-card', ResultsCard)
</script>