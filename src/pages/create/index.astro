---
import { t } from 'astro-i18n';
import CreateProcessLayout from '@layouts/CreateProcessLayout.astro';
import { parseProcessCookie } from '@utils/parseProcessCookie'
import type { ProcessCookie } from '@utils/parseProcessCookie'
import Step1 from '@components/setupProcess/Step1.astro';
import Step2 from '@components/setupProcess/Step2.astro';

import { Icon } from 'astro-icon'

const rawCookieValue = Astro.cookies.get('process')?.value;
const processCookie: ProcessCookie = parseProcessCookie(rawCookieValue);
const {
  create = 'false',
  phase = '',
  weighting = '',
  title = '',
  nojsdescription = '',
  quillopsdescription = '',
  startProposalDate = 0,
  endProposalDate = 0,
  startVotingDate = 0,
  endVotingDate = 0,
  step = '1'
} = processCookie as ProcessCookie;
const currentStep = Number(step);

let modifiedCreate = JSON.parse(create);

if (currentStep === 1 && !phase && !weighting && !title && !nojsdescription && !quillopsdescription) {
    modifiedCreate = false;
}

const formatDate = (timestamp: number): string => {
  let date = new Date(timestamp)

  const options: Intl.DateTimeFormatOptions = {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
  };

  return date.toLocaleDateString('en-US', options);
}
console.log(processCookie)

---

<CreateProcessLayout step={currentStep}>
  {modifiedCreate ? (
    <input type="checkbox" id="existingProcessModal" class="modal-toggle" checked/>
    <label for="existingProcessModal" class="modal">
      <label class="modal-box">
        <label for="existingProcessModal" class="btn btn-sm btn-circle absolute right-2 top-2">
          <Icon width="22" name="close"/>
        </label>
        <h3>{() => t('setup.continueEditing')}</h3>
        <p>{() => t('setup.existingProcessPrompt')}</p>

        <div class="process-details">
          { title && <p><strong>{() => t('process.topic')}:</strong> {title}</p> }
          { nojsdescription && <p><strong>{() => t('process.description')}:</strong> {nojsdescription}</p> }
          { weighting && <p><strong>{() => t('process.weighting')}:</strong> {weighting}</p> }
        </div>

        <div class="flex justify-center">
          <form action="/api/start-new-process" method="post">
            <button type="submit" class="btn m-2">{t('startNew')}</button>
          </form>
          <label for="existingProcessModal" class="btn m-2">{() => t('buttons.continue')}</label>
        </div>
      </label>
    </label>
  ) : null}

  { currentStep === 1 ? (
    <Step1 title={title} quillopsdescription={quillopsdescription} weighting={weighting} nojsdescription={nojsdescription}/>
  ) : currentStep === 2 ? (
    <Step2 phase={phase} proposalStartDate={startProposalDate} proposalEndDate={endProposalDate} votingStartDate={startVotingDate} votingEndDate={endVotingDate} />
  ) : currentStep === 3 ? (
    <div class="process-details">
      {title && <p><strong>{t('process.topic')}:</strong> {title}</p>}
      {nojsdescription && <p><strong>{t('process.description')}:</strong> {nojsdescription}</p>}
      <p><strong>{ t(`phases.proposal.title`) }</strong></p>

      {startProposalDate && <p><strong>{t('phases.startAt')}:</strong> {formatDate(startProposalDate)}</p>}
      {endProposalDate && <p><strong>{t('phases.endsAt')}:</strong> {formatDate(endProposalDate)}</p>}
      {phase === 'full' && <p><strong>{ t(`phases.voting.title`) }</strong></p>}

      {startVotingDate && <p><strong>{t('phases.startAt')}:</strong> {formatDate(startVotingDate)}</p>}
      {endVotingDate && <p><strong>{t('phases.endsAt')}:</strong> {formatDate(endVotingDate)}</p>}
    </div>
    <div class="flex justify-center">
      <form action="/api/update-step" method="post">
        <input type="hidden" name="step" value="2"/>

        <button type="submit" class="btn m-2">{t('buttons.back')}</button>
      </form>
      <label for="existingProcessModal" class="btn m-2">{t('buttons.start')}</label>
    </div>
  ) : null }

</CreateProcessLayout>
