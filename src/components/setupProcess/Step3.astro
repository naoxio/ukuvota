---
import IProposal from '@interfaces/IProposal';
import { Translator } from '@utils/i18n.js';
import { prettyFormatInTimezone } from '@utils/dateUtils';

const translator = new Translator(Astro.currentLocale || 'en'); 


type Props = {
    title: string;
    descriptionId: string;
    proposals: Array<IProposal>;
    proposalStartDate: number;
    proposalEndDate: number;
    votingStartDate: number;
    votingEndDate: number;
    timezone: string;
    weighting: string;
}
const { title, descriptionId, proposalStartDate, proposalEndDate, votingStartDate, votingEndDate, proposals, timezone, weighting } = Astro.props;

---
<div class="process-details">
    <div class="border border-gray-200 rounded-lg shadow-md p-6 mb-8">
        {title ? (
            <div class="mb-4">
                <h2 class="text-xl font-semibold mb-2">{translator.t('process.topic')}</h2>
                <p>{title}</p>
                <div id="descriptionContent" data-description-id={descriptionId}/>

            </div>
        ) : null}
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {proposalStartDate && proposalEndDate ? (
                <div class="p-4">
                        <h2 class="text-lg font-semibold mb-2">{ translator.t(`phases.proposal.title`) }</h2>
                        <p><h3 class="font-semibold">{translator.t('phases.startAt')}:</h3> {prettyFormatInTimezone(proposalStartDate, timezone)}</p>
                        <p><h3 class="font-semibold">{translator.t('phases.endsAt')}:</h3> {prettyFormatInTimezone(proposalEndDate, timezone)}</p>
                </div>
            ) : null }
            <div class="p-4">
                <h2 class="text-lg font-semibold mb-2">{ translator.t(`phases.voting.title`) }</h2>
                {votingStartDate ? <p><h3 class="font-semibold">{translator.t('phases.startAt')}:</h3> {prettyFormatInTimezone(votingStartDate, timezone)}</p> : null}
                {votingEndDate ? <p><h3 class="font-semibold">{translator.t('phases.endsAt')}:</h3> {prettyFormatInTimezone(votingEndDate, timezone)}</p> : null}
            </div>
            <div class="mt-4">
            <h3 class="text-lg font-semibold mb-2">{translator.t('setup.timezone')}:</h3>
            <p>{timezone}</p>
            </div>
        </div>
        {proposals.length > 0 ? (
            <div class="mt-8">
                <h2 class="text-xl font-semibold mb-4">{translator.t('process.proposals')}</h2>
                <ul class="space-y-4">
                    { proposals.map((proposal: IProposal) => (
                    <li class="border border-gray-200 rounded-lg p-4" id={`proposal-${proposal.id}`}>
                        <b class="text-lg">{proposal.title || 'Untitled Proposal'}</b>
                        <p class="mt-2" id={`description-${proposal.id}`}></p>
                    </li>
                    ))}
                </ul>
            </div>
        ) : null}
    </div>
</div>
<div class="flex justify-around mt-5">
    <form action="/api/update-step" method="post">
        <input type="hidden" name="step" value="2"/>

        <button type="submit" class="btn m-2">{translator.t('buttons.back')}</button>
    </form>
    <form action="/api/start-process" method="post">
        <input type="hidden" name="descriptionContent" id="descriptionContentInput" />
        <input type="hidden" name="proposalsData" id="proposalsDataInput" />
        <button type="submit" class="btn btn-primary m-2">{translator.t('buttons.start')}</button>
    </form>
</div>
<script>
    import getQuillHTML from '@utils/getQuillHTML';
    import localforage from 'localforage';
    import type Delta from 'quill-delta';


    const descriptionContentDiv = document.getElementById('descriptionContent') as HTMLElement;
    const descriptionContentInput = document.getElementById('descriptionContentInput') as HTMLInputElement;
    if (descriptionContentDiv && descriptionContentInput) {
        const descriptionId = descriptionContentDiv.dataset.descriptionId || '';
        const descriptionContent = await localforage.getItem(descriptionId) as string || '';
        if (descriptionContent) {
            const descriptionHTML = getQuillHTML(JSON.parse(descriptionContent));
            descriptionContentDiv.innerHTML = descriptionHTML;
            descriptionContentInput.value = JSON.stringify(descriptionContent);
        }
    }

    const proposals = document.querySelectorAll('[id^="proposal-"]');
        const proposalsData = await Promise.all(Array.from(proposals).map(async (proposal) => {
            const proposalId = proposal.id.replace('proposal-', '');
            const titleElement = proposal.querySelector('b.text-lg');
            const descriptionContent = await localforage.getItem(`description-${proposalId}`) as string || '';
            if(descriptionContent) {
                const descriptionDelta = JSON.parse(descriptionContent) as Delta;
                    
                const descriptionElement = document.getElementById(`description-${proposalId}`);
                if (descriptionElement) {
                    descriptionElement.innerHTML = getQuillHTML(descriptionDelta);
                }
            }
            return {
                id: proposalId,
                title: titleElement ? titleElement.textContent : '',
                description: descriptionContent
            };
        }));

        const proposalsDataInput = document.getElementById('proposalsDataInput') as HTMLInputElement;
        if (proposalsDataInput) {
            proposalsDataInput.value = JSON.stringify(proposalsData);
        }

</script>