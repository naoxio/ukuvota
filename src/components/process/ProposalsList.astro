---
import { createProposalElement } from '@utils/proposalTemplate';
import { exampleProposals } from '@utils/exampleProposals';

const locale = Astro.currentLocale || 'en';
const dropdownOptions = await exampleProposals(locale);

import IProposal from '@interfaces/IProposal';

interface Props {
    processId?: string;
    proposals: Array<IProposal>;
    isSetup?: boolean;
}

const { processId, proposals, isSetup } = Astro.props;
---

<div>
  <div id="proposals-container" data-is-setup={isSetup}>
    {proposals.length > 0 ? (
      proposals.map((proposal) => (
        <div class="proposal card outline outline-1 shadow-xl py-4 px-4 my-2 w-full" id={proposal.id} data-editing={proposal.editing?.toString()}>
          {createProposalElement(proposal.id, proposal.title, proposal.description || '', isSetup)}
        </div>
      ))
     ) : (
      <p>No proposals found.</p>
    )}
  </div>
 
  <div class="flex items-center flex-wrap justify-center w-full" data-process={processId}>
    <button id="add-button" class="btn p-2">Add Proposal</button>
    <div class="dropdown">
      <div tabindex={0} role="button" class="btn m-1">Add Proposal Template</div>
      <ul tabindex={0} class="dropdown-content menu p-2 shadow rounded-box z-[1]">
        {dropdownOptions.map((option, index) => (
          <li>
            <a class="flex flex-col">
              <b class="title">{option.title}</b>
              <p class="description">{option.description.ops[0].insert}</p>
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</div>
<script>
  import { createQuill, updateQuill } from '@utils/quillUtils';
  /* @ts-ignore */
  import { v4 as uuidv4 } from 'uuid';
  import { createProposalElement } from '@utils/proposalTemplate';

  const addButton: HTMLElement | null = document.getElementById('add-button');
  let proposalCount: number = 0;

  const proposalsContainer: HTMLElement | null = document.getElementById('proposals-container');
  const isSetup: boolean = proposalsContainer?.dataset.isSetup === 'true';


  const setupEditButtonListener = ( proposalElement: Element ) => {
    const editButton = proposalElement.querySelector('.edit-button') as HTMLButtonElement;
    const saveButton = proposalElement.querySelector('.save-button') as HTMLButtonElement;
    const viewElement = proposalElement.querySelector('.view-mode') as HTMLElement;
    const editElement = proposalElement.querySelector('.edit-mode') as HTMLElement;
    if (!(editButton && saveButton && viewElement && editElement)) return
    // Listener for entering edit mode
    editButton.addEventListener('click', () => {
      viewElement.style.display = 'none';
      editElement.style.display = 'block';
      editButton.style.display = 'none';
      saveButton.style.display = 'block';
      proposalElement.setAttribute('data-editing', 'true');
    });
    // Listener for saving changes (exiting edit mode)
    saveButton.addEventListener('click', () => {
      console.log(proposalElement.id)
      // Fetching the updated values
      const titleInputValue = (proposalElement.querySelector(`.edit-mode input`) as HTMLInputElement).value;
      const quillEditorContent = (proposalElement.querySelector(`.edit-mode .ql-editor`) as HTMLElement).innerHTML;

      // Updating the view mode elements
      const h1 = proposalElement.querySelector('.view-mode h1') as HTMLElement
      h1.textContent = titleInputValue;
      const desc = proposalElement.querySelector('.view-mode p') as HTMLElement
      desc.innerHTML = quillEditorContent;

      // Switching the display modes
      viewElement.style.display = 'block';
      editElement.style.display = 'none';
      editButton.style.display = 'block';
      saveButton.style.display = 'none';
      proposalElement.setAttribute('data-editing', 'false');
    });
}

  if (addButton && proposalsContainer) {
    const proposalElements = proposalsContainer.children;

    for (let i = 0; i < proposalElements.length; i++) {
      const proposalElement = proposalElements[i];
      setupEditButtonListener(proposalElement);

      const flexElement = proposalElement.querySelector('.flex') as HTMLElement;
      if (flexElement) {
        const descriptionDiv: HTMLElement | null = proposalElement.querySelector(`#description-${flexElement.id}`);
        const quillOpsInput: HTMLInputElement | null = proposalElement.querySelector(`#quillops-${flexElement.id}`);
        const deleteButton: HTMLElement | null = proposalElement.querySelector(`.delete`);

        if (descriptionDiv && quillOpsInput) {
          const quillEditor = createQuill(`#description-${flexElement.id}`);

          if (quillOpsInput.value) {
            try {
              const quillOps = JSON.parse(quillOpsInput.value);
              updateQuill(quillEditor, quillOps);
            } catch (error) {
              console.error('Error parsing quillops:', error);
            }
          }

          quillEditor.on('text-change', () => {
            /* @ts-ignore */
            quillOpsInput.value = JSON.stringify(quillEditor.editor.delta)
          });
        }
        if (deleteButton) {
          deleteButton.addEventListener('click', () => {
            proposalsContainer.removeChild(proposalElement);
          });
        }
      }
    }

    if (addButton) {
      console.log('Add button found');
      addButton.addEventListener('click', () => {
        console.log('Add button clicked');
        const uniqueId: string = uuidv4();
        const proposalElement = createProposalElement(uniqueId, '', '', isSetup);
        if (proposalsContainer) {
          console.log('Proposals container found');
          proposalsContainer.appendChild(proposalElement);
          console.log('Proposal element added');
        } else {
          console.log('Proposals container not found');
        }

        setupEditButtonListener(proposalElement);

        const titleInput: HTMLElement | null = proposalElement.querySelector(`#title-${uniqueId}`);
        const deleteButton: HTMLElement | null = proposalElement.querySelector(`.delete`);
        const descriptionDiv: HTMLElement | null = proposalElement.querySelector(`#description-${uniqueId}`);
        const quillOpsInput: HTMLInputElement | null = proposalElement.querySelector(`#quillops-${uniqueId}`);

        if (titleInput) {
          titleInput.addEventListener('input', (event: Event) => {
            // Logic to handle title input
            const inputElement = event.target as HTMLInputElement;
          });
        }

        if (deleteButton) {
          deleteButton.addEventListener('click', () => {
            proposalsContainer.removeChild(proposalElement);
          });
        }

        if (descriptionDiv && quillOpsInput) {
          // Initialize Quill on the description div
          const quillEditor = createQuill(`#description-${uniqueId}`);

          if (quillOpsInput.value) {
            try {
              const quillOps = JSON.parse(quillOpsInput.value);
              updateQuill(quillEditor, quillOps);
            } catch (error) {
              console.error('Error parsing quillops:', error);
            }
          }

          quillEditor.on('text-change', () => {
            /* @ts-ignore */
            quillOpsInput.value = JSON.stringify(quillEditor.editor.delta)
          });
        }
        proposalCount++;
      });
    } else {
      console.log('Add button not found');
    }
  } else {
    console.log('Proposals container or add button not found');
  }

  const dropdownOptionsElements = document.querySelectorAll('.dropdown-content a');

  dropdownOptionsElements.forEach((dropdownOptionElement: Element) => {
    dropdownOptionElement.addEventListener('click', (event: Event) => {
      const selectedTemplateTitle = dropdownOptionElement.querySelector('.title')?.textContent || '';
      const selectedTemplateDescription = dropdownOptionElement.querySelector('.description')?.textContent || '';

      const uniqueId = uuidv4();
      const proposalElement = createProposalElement(uniqueId, selectedTemplateTitle, '', false);
          
      setupEditButtonListener(proposalElement);
      
      if (proposalsContainer) {
        proposalsContainer.appendChild(proposalElement);
        const deleteButton = proposalElement.querySelector('.delete');
        if (deleteButton) {
          deleteButton.addEventListener('click', () => {
            proposalsContainer.removeChild(proposalElement);
          });
        }

        const descriptionDiv: HTMLElement | null = proposalElement.querySelector(`#description-${uniqueId}`);
        const quillOpsInput: HTMLInputElement | null = proposalElement.querySelector(`#quillops-${uniqueId}`);

        if (descriptionDiv && quillOpsInput) {
          const quillEditor = createQuill(`#description-${uniqueId}`);
          quillEditor.clipboard.dangerouslyPasteHTML(selectedTemplateDescription);

          quillEditor.on('text-change', () => {
            /* @ts-ignore */
            quillOpsInput.value = JSON.stringify(quillEditor.editor.delta)
          });
        }
      }
    });
  });

</script>