---
import getProposalTemplates from '@utils/proposalTemplates';

const locale = Astro.currentLocale || 'en';
const dropdownOptions = await getProposalTemplates(locale);

import IProposal from '@interfaces/IProposal';
import { Translator } from '@utils/i18n.js';

const translator = new Translator(Astro.currentLocale || 'en'); 
await translator.init();

interface Props {
    processId?: string;
    nojs?: boolean;
    proposals: Array<IProposal>;
    isSetup?: boolean;
}

const { processId, nojs, proposals, isSetup } = Astro.props;
console.log(proposals)
---
<div>
  <div id="proposals-container">
    {proposals.map((proposal: IProposal) => (
      <div class="proposal card outline outline-1 shadow-xl py-4 px-4 my-2 w-full">
        {proposal.editing ? (
          <>
            {nojs ? (
              <div class="flex items-center flex-col">
                <div class="flex flex-col w-full">
                  <form action={ isSetup ? "/api/process-store" : "/api/delete-proposal" } method="POST" class="flex justify-end">
                    <input type="hidden" name="step" value="2" />
                    <input type="hidden" name="nojsSubmission" value="true" />
                    <input type="hidden" name="proposalId" value={proposal.id} />
                    <input type="hidden" name="deleteProposal" value="true" />
                    <button type="submit" class="button button-text text-error">&#128465;</button>
                  </form>
                  <form action={ isSetup ? "/api/process-store" : "/api/update-proposal" } method="POST">
                    <input type="hidden" name="step" value="2" />
                    <input type="hidden" name="nojsSubmission" value="true" />
                    <input type="hidden" name="proposalId" value={proposal.id} />
                    <input type="hidden" name="updateProposal" value="true" />

                    <b>{translator.t('process.proposal')}</b>
                    <input type="text" name="title" class="input input-bordered input-sm my-2 w-full" value={proposal.title} required />
                    <label>{translator.t('process.description')}</label>

                    <textarea class="textarea textarea-bordered textarea-sm my-2 w-full" name="description">{proposal.description}</textarea>
                    <div class="flex justify-center">
                      <button type="submit" class="btn">{translator.t('buttons.update')}</button>
                    </div>
                  </form>
                </div>
              </div>
            ) : (
              <div class="flex items-center flex-col" id={proposal.id}>
                <div class="flex flex-col w-full">
                  <b>Title</b>
                  <input id={`title-${proposal.id}`} type="text" class="input input-bordered input-sm my-2 w-full" value={proposal.title} />
                  <label>Description</label>
                  <div id={`description-${proposal.id}`}>{proposal.description}</div>
                  <input type="hidden" id={`quillops-${proposal.id}`} />
                </div>
                <div class="flex justify-center w-full pt-2">
                  <button id={`delete-${proposal.id}`} class="delete btn btn-ghost text-error btn-xs">Delete</button>
                </div>
              </div>
            )}
        </>
      ) : (
        <div>
          <b>{proposal.title || 'Untitled Proposal'}</b>
          <p>{proposal.description}</p>
        </div>
      )}
      </div>
    ))}
  </div>
  {nojs ? (
    <div class="flex items-center flex-wrap justify-center">
      <br/>
      <form action="/api/process-store" method="POST">
        <input type="hidden" name="step" value="2" />
        <input type="hidden" name="nojsSubmission" value="true" />
        <input type="hidden" name="title" value="" />
        <input type="hidden" name="addProposal" value="true" />

        <input type="hidden" name="processId" value={processId} />
        <button class="btn p-2">{translator.t('process.addProposal')}</button>
      </form>

      <div class="dropdown">
        <label tabindex="0" class="btn m-1">{ translator.t('process.addProposalTemplate') }</label>
        <ul tabindex="0" class="dropdown-content menu p-2 shadow rounded-box">
          {dropdownOptions.map((option: any, index) => (
            <form action="/api/process-store" method="POST"  class="flex justify-between items-center flex-wrap">
              <input type="hidden" name="step" value="2" />
              <input type="hidden" name="nojsSubmission" value="true" />
              <input type="hidden" name="addProposal" value="true" />

              <input type="hidden" name="title" value="" />
              <input type="hidden" name="processId" value={processId} />
              <input type="hidden" name="tmpl" value={index}/>

              <button type="submit" class="btn w-64 mt-2 h-24 items-center flex flex-col justify-center">
                <b class="title">{option.title}</b>
                <p class="description">{option.description.ops[0].insert}</p>
              </button>
            </form>
          ))}
        </ul>
      </div>
    </div>
  ) : (
    <div class="flex items-center flex-wrap justify-center w-full" data-process={processId}>
      <button id="add-button" class="btn p-2">{ translator.t('process.addProposal') }</button>
      <div class="dropdown">
        <div tabindex={0} role="button" class="btn m-1">{ translator.t('process.addProposalTemplate') }</div>
        <ul tabindex={0} class="dropdown-content menu p-2 shadow rounded-box z-[1]">
          {dropdownOptions.map((option, index) => (
            <li>
              <a class="flex flex-col">
                <b class="title">{option.title}</b>
                <p class="description">{option.description.ops[0].insert}</p>
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  )}
</div>



<script>

  import { createQuill, updateQuill } from '@utils/quillUtils';
  /* @ts-ignore */
  import { v4 as uuidv4 } from 'uuid';

  const createProposalElement = (uniqueId: string, title: string, description: string): HTMLDivElement => {
    const proposalElement: HTMLDivElement = document.createElement('div');
    proposalElement.className = 'proposal card outline outline-1 shadow-xl py-4 px-4 my-2 w-full';
    proposalElement.innerHTML = `
      <div class="flex items-center flex-col" id="${uniqueId}">
        <div class="flex flex-col w-full">
          <b>Title</b>
          <input id="title-${uniqueId}" type="text" class="input input-bordered input-sm my-2 w-full" value="${title}" />
          <label>Description</label>
          <div id="description-${uniqueId}">${description}</div>
          <input type="hidden" id="quillops-${uniqueId}" />
        </div>
      </div>
      <div class="flex justify-center w-full pt-2">
        <button class="delete btn btn-ghost text-error btn-xs">Delete</button>
      </div>
    `;
    return proposalElement;
  }

  const addButton: HTMLElement | null = document.getElementById('add-button');
  const proposalsContainer: HTMLElement | null = document.getElementById('proposals-container');
  let proposalCount: number = 0;

  if (addButton && proposalsContainer) {
    const proposalElements = proposalsContainer.children;

    for (let i = 0; i < proposalElements.length; i++) {
      const flexElement = proposalElements[i].querySelector('.flex') as HTMLElement;
      console.log(flexElement)
      if (flexElement) {
        const descriptionDiv: HTMLElement | null = proposalsContainer.querySelector(`#description-${flexElement.id}`);
        const quillOpsInput: HTMLInputElement | null = proposalsContainer.querySelector(`#quillops-${flexElement.id}`);
        const deleteButton: HTMLElement | null = proposalsContainer.querySelector(`#delete-${flexElement.id}`);

        if (descriptionDiv && quillOpsInput) {
          const quillEditor = createQuill(`#description-${flexElement.id}`);

          if (quillOpsInput.value) {
            try {
              const quillOps = JSON.parse(quillOpsInput.value);
              updateQuill(quillEditor, quillOps);
            } catch (error) {
              console.error('Error parsing quillops:', error);
            }
          }

          quillEditor.on('text-change', () => {
            /* @ts-ignore */
            quillOpsInput.value = JSON.stringify(quillEditor.editor.delta)
          });
        }
        if (deleteButton) {
          deleteButton.addEventListener('click', () => {
            proposalsContainer.removeChild(proposalElements[i]);
          });
        }
      }
    }

    addButton.addEventListener('click', () => {
      const uniqueId: string = uuidv4();
      const proposalElement = createProposalElement(uniqueId, '', '');
      proposalsContainer.appendChild(proposalElement);
      
      const titleInput: HTMLElement | null = proposalElement.querySelector(`#title-${uniqueId}`);
      const deleteButton: HTMLElement | null = proposalElement.querySelector(`.delete`);
      const descriptionDiv: HTMLElement | null = proposalElement.querySelector(`#description-${uniqueId}`);
      const quillOpsInput: HTMLInputElement | null = proposalElement.querySelector(`#quillops-${uniqueId}`);

      if (titleInput) {
        titleInput.addEventListener('input', (event: Event) => {
          // Logic to handle title input
          const inputElement = event.target as HTMLInputElement;
          console.log(`Title Updated: ${inputElement.value}`);
        });
      }

      console.log(deleteButton)
      if (deleteButton) {
        deleteButton.addEventListener('click', () => {
          proposalsContainer.removeChild(proposalElement);
        });
      }

      if (descriptionDiv && quillOpsInput) {
        // Initialize Quill on the description div
        const quillEditor = createQuill(`#description-${uniqueId}`);

        if (quillOpsInput.value) {
          try {
            const quillOps = JSON.parse(quillOpsInput.value);
            updateQuill(quillEditor, quillOps);
          } catch (error) {
            console.error('Error parsing quillops:', error);
          }
        }

        quillEditor.on('text-change', () => {
          /* @ts-ignore */
          quillOpsInput.value = JSON.stringify(quillEditor.editor.delta)
        });
      }
      proposalCount++;
    });
  }

  const dropdownOptionsElements = document.querySelectorAll('.dropdown-content a');

  dropdownOptionsElements.forEach((dropdownOptionElement: Element) => {
    dropdownOptionElement.addEventListener('click', (event: Event) => {
      const selectedTemplateTitle = dropdownOptionElement.querySelector('.title')?.textContent || '';
      const selectedTemplateDescription = dropdownOptionElement.querySelector('.description')?.textContent || '';

      const uniqueId = uuidv4();
      const proposalElement = createProposalElement(uniqueId, selectedTemplateTitle, '');

      if (proposalsContainer) {
        proposalsContainer.appendChild(proposalElement);
        const deleteButton = proposalElement.querySelector('.delete');
        if (deleteButton) {
          deleteButton.addEventListener('click', () => {
            proposalsContainer.removeChild(proposalElement);
            
          });
        }

        const descriptionDiv: HTMLElement | null = proposalElement.querySelector(`#description-${uniqueId}`);
        const quillOpsInput: HTMLInputElement | null = proposalElement.querySelector(`#quillops-${uniqueId}`);

        if (descriptionDiv && quillOpsInput) {
          const quillEditor = createQuill(`#description-${uniqueId}`);
          quillEditor.clipboard.dangerouslyPasteHTML(selectedTemplateDescription);

          quillEditor.on('text-change', () => {
            /* @ts-ignore */
            quillOpsInput.value = JSON.stringify(quillEditor.editor.delta)
          });
        }
      }
  });
});
</script>
