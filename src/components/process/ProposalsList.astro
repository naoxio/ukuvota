---
import getProposalTemplates from '@utils/proposalTemplates';

const locale = Astro.currentLocale || 'en';
const dropdownOptions = await getProposalTemplates(locale);

import IProposal from '@interfaces/IProposal';
import { Translator } from '@utils/i18n.js';

const translator = new Translator(Astro.currentLocale || 'en'); 
await translator.init();

interface Props {
    processId?: string;
    proposals: Array<IProposal>;
    isSetup?: boolean;
}

const { processId, proposals, isSetup } = Astro.props;
---

<div>
  <div id="proposals-container">
    {proposals.map((proposal) => (
      <div class="proposal card outline outline-1 shadow-xl py-4 px-4 my-2 w-full" id={proposal.id} data-editing={proposal.editing.toString()}>
        <div class="view" style={proposal.editing ? 'display: none;' : ''}>
          <b>{proposal.title || 'Untitled Proposal'}</b>
          <p>{proposal.description}</p>
          {!isSetup && (
            <button class="toggle-edit-button btn btn-primary btn-sm">{translator.t('edit')}</button>
          )}
        </div>
        <div class="edit" style={proposal.editing ? '' : 'display: none;'}>
          <div class="flex flex-col w-full">
            <b>Title</b>
            <input type="text" class="title-input input input-bordered input-sm my-2 w-full" value={proposal.title} />
            <label>Description</label>
            <div class="description">{proposal.description}</div>
            <input type="hidden" class="quillops" />
          </div>
          <div class="flex justify-center w-full pt-2">
            {!isSetup && (
              <button class="toggle-edit-button btn btn-primary btn-sm">{translator.t('save')}</button>
            )}
            <button class="delete-button btn btn-ghost text-error btn-xs">{translator.t('delete')}</button>
          </div>
        </div>
      </div>
    ))}
  </div>
 
  <div class="flex items-center flex-wrap justify-center w-full" data-process={processId}>
    <button id="add-button" class="btn p-2">{translator.t('process.addProposal')}</button>
    <div class="dropdown">
      <div tabindex={0} role="button" class="btn m-1">{translator.t('process.addProposalTemplate')}</div>
      <ul tabindex={0} class="dropdown-content menu p-2 shadow rounded-box z-[1]">
        {dropdownOptions.map((option, index) => (
          <li>
            <a class="flex flex-col">
              <b class="title">{option.title}</b>
              <p class="description">{option.description.ops[0].insert}</p>
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>

</div>

<script>
  import { createQuill, updateQuill } from '@utils/quillUtils';
  /* @ts-ignore */
  import { v4 as uuidv4 } from 'uuid';

  const createProposalElement = (uniqueId: string, title: string, description: string): HTMLDivElement => {
    const proposalElement: HTMLDivElement = document.createElement('div');
    proposalElement.className = 'proposal card outline outline-1 shadow-xl py-4 px-4 my-2 w-full';
    proposalElement.innerHTML = `
      <div class="flex items-center flex-col" id="${uniqueId}">
        <div class="flex flex-col w-full">
          <b>Title</b>
          <input id="title-${uniqueId}" type="text" class="input input-bordered input-sm my-2 w-full" value="${title}" />
          <label>Description</label>
          <div id="description-${uniqueId}">${description}</div>
          <input type="hidden" id="quillops-${uniqueId}" />
        </div>
      </div>
      <div class="flex justify-center w-full pt-2">
        <button class="delete btn btn-ghost text-error btn-xs">Delete</button>
      </div>
    `;
    return proposalElement;
  }

  const addButton: HTMLElement | null = document.getElementById('add-button');
  const proposalsContainer: HTMLElement | null = document.getElementById('proposals-container');
  let proposalCount: number = 0;

  if (addButton && proposalsContainer) {
    const proposalElements = proposalsContainer.children;

    for (let i = 0; i < proposalElements.length; i++) {
      const proposalElement = proposalElements[i];
      const toggleEditButton = proposalElement.querySelector('.toggle-edit-button');
      const viewElement = proposalElement.querySelector('.view');
      const editElement = proposalElement.querySelector('.edit');

      if (toggleEditButton && viewElement && editElement) {
        toggleEditButton.addEventListener('click', () => {
          const isEditing = proposalElement.getAttribute('data-editing') === 'true';

          if (isEditing) {
            // Save the changes and switch to view mode
            viewElement.style.display = 'block';
            editElement.style.display = 'none';
            proposalElement.setAttribute('data-editing', 'false');
            toggleEditButton.textContent = translator.t('edit');
          } else {
            // Switch to edit mode
            viewElement.style.display = 'none';
            editElement.style.display = 'block';
            proposalElement.setAttribute('data-editing', 'true');
            toggleEditButton.textContent = translator.t('save');
          }
        });
      }

      const flexElement = proposalElement.querySelector('.flex') as HTMLElement;
      if (flexElement) {
        const descriptionDiv: HTMLElement | null = proposalElement.querySelector(`#description-${flexElement.id}`);
        const quillOpsInput: HTMLInputElement | null = proposalElement.querySelector(`#quillops-${flexElement.id}`);
        const deleteButton: HTMLElement | null = proposalElement.querySelector(`.delete-button`);

        if (descriptionDiv && quillOpsInput) {
          const quillEditor = createQuill(`#description-${flexElement.id}`);

          if (quillOpsInput.value) {
            try {
              const quillOps = JSON.parse(quillOpsInput.value);
              updateQuill(quillEditor, quillOps);
            } catch (error) {
              console.error('Error parsing quillops:', error);
            }
          }

          quillEditor.on('text-change', () => {
            /* @ts-ignore */
            quillOpsInput.value = JSON.stringify(quillEditor.editor.delta)
          });
        }
        if (deleteButton) {
          deleteButton.addEventListener('click', () => {
            proposalsContainer.removeChild(proposalElement);
          });
        }
      }
    }

    addButton.addEventListener('click', () => {
      const uniqueId: string = uuidv4();
      const proposalElement = createProposalElement(uniqueId, '', '');
      proposalsContainer.appendChild(proposalElement);
      
      const titleInput: HTMLElement | null = proposalElement.querySelector(`#title-${uniqueId}`);
      const deleteButton: HTMLElement | null = proposalElement.querySelector(`.delete`);
      const descriptionDiv: HTMLElement | null = proposalElement.querySelector(`#description-${uniqueId}`);
      const quillOpsInput: HTMLInputElement | null = proposalElement.querySelector(`#quillops-${uniqueId}`);

      if (titleInput) {
        titleInput.addEventListener('input', (event: Event) => {
          // Logic to handle title input
          const inputElement = event.target as HTMLInputElement;
        });
      }

      if (deleteButton) {
        deleteButton.addEventListener('click', () => {
          proposalsContainer.removeChild(proposalElement);
        });
      }

      if (descriptionDiv && quillOpsInput) {
        // Initialize Quill on the description div
        const quillEditor = createQuill(`#description-${uniqueId}`);

        if (quillOpsInput.value) {
          try {
            const quillOps = JSON.parse(quillOpsInput.value);
            updateQuill(quillEditor, quillOps);
          } catch (error) {
            console.error('Error parsing quillops:', error);
          }
        }

        quillEditor.on('text-change', () => {
          /* @ts-ignore */
          quillOpsInput.value = JSON.stringify(quillEditor.editor.delta)
        });
      }
      proposalCount++;
    });
  }

  const dropdownOptionsElements = document.querySelectorAll('.dropdown-content a');

  dropdownOptionsElements.forEach((dropdownOptionElement: Element) => {
    dropdownOptionElement.addEventListener('click', (event: Event) => {
      const selectedTemplateTitle = dropdownOptionElement.querySelector('.title')?.textContent || '';
      const selectedTemplateDescription = dropdownOptionElement.querySelector('.description')?.textContent || '';

      const uniqueId = uuidv4();
      const proposalElement = createProposalElement(uniqueId, selectedTemplateTitle, '');

      if (proposalsContainer) {
        proposalsContainer.appendChild(proposalElement);
        const deleteButton = proposalElement.querySelector('.delete');
        if (deleteButton) {
          deleteButton.addEventListener('click', () => {
            proposalsContainer.removeChild(proposalElement);
            
          });
        }

        const descriptionDiv: HTMLElement | null = proposalElement.querySelector(`#description-${uniqueId}`);
        const quillOpsInput: HTMLInputElement | null = proposalElement.querySelector(`#quillops-${uniqueId}`);

        if (descriptionDiv && quillOpsInput) {
          const quillEditor = createQuill(`#description-${uniqueId}`);
          quillEditor.clipboard.dangerouslyPasteHTML(selectedTemplateDescription);

          quillEditor.on('text-change', () => {
            /* @ts-ignore */
            quillOpsInput.value = JSON.stringify(quillEditor.editor.delta)
          });
        }
      }
    });
  });
</script>