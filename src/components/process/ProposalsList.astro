---
import { t } from 'astro-i18n';
import dropdownOptions from '@utils/proposalTemplates';
import IProposal from '@interfaces/IProposal';

interface Props {
    processId?: string;
    nojs?: boolean;
    proposals: Array<IProposal>
}

const { processId, nojs } = Astro.props;
---

<div>
  <div id="proposals-container"></div>
  
  {nojs ? (
    <div class="flex items-center flex-wrap justify-center">
      <br/>
      <form action="/api/process-store" method="POST">
        <input type="hidden" name="step" value="2" />
        <input type="hidden" name="nojsSubmission" value="true" />

        <input type="hidden" name="processId" value={processId} />
        <button class="btn p-2">{t('process.addProposal')}</button>
      </form>

      <div class="dropdown">
        <label tabindex="0" class="btn m-1">{ () => t('addProposalTemplate') }</label>
        <ul tabindex="0" class="dropdown-content menu p-2 shadow rounded-box">
          {dropdownOptions.map((option: any, index) => (
            <form action="/api/process-store" method="POST"  class="flex justify-between items-center flex-wrap">
              <input type="hidden" name="step" value="2" />
              <input type="hidden" name="nojsSubmission" value="true" />

              <input type="hidden" name="title" value={option.title} />
              <input type="hidden" name="description" value={option.description.ops[0].insert} />
              <input type="hidden" name="processId" value={processId} />

              <button type="submit" class="btn w-64 mt-2 h-24 items-center flex flex-col justify-center">
                <b class="title">{option.title}</b>
                <p class="description">{option.description.ops[0].insert}</p>
              </button>
            </form>
          ))}
        </ul>
      </div>
    </div>
  ) : (
    <div class="flex items-center flex-wrap" data-process={processId}>
      <button id="add-button" class="btn p-2">{ () => t('process.addProposal') }</button>
      <div class="dropdown">
        <label tabindex="0" class="btn m-1">{ () => t('addProposalTemplate') }</label>
        <ul tabindex="0" class="dropdown-content menu p-2 shadow rounded-box">
          {dropdownOptions.map((option, index) => (
            <li>
              <a class="flex flex-col">
                <b class="title">{option.title}</b>
                <p class="description">{option.description.ops[0].insert}</p>
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  )}
</div>



<script>
  const addButton: HTMLElement | null = document.getElementById('add-button');
  const proposalsContainer: HTMLElement | null = document.getElementById('proposals-container');
  let proposalCount: number = 0;

  if (addButton && proposalsContainer) {
    addButton.addEventListener('click', () => {
      const proposalElement: HTMLDivElement = document.createElement('div');
      const uniqueId: string = `proposal-${proposalCount}`;
      proposalElement.className = 'proposal card outline outline-1 shadow-xl py-4 px-4 my-2 w-full';
      proposalElement.innerHTML = `
        <div class="flex items-center flex-col" id="${uniqueId}">
          <div class="flex flex-col w-full">
            <b>Proposal</b>
            <input id="title-${uniqueId}" type="text" class="input input-bordered input-sm my-2 w-full" />
            <label>Description</label>
            <div id="description-${uniqueId}"></div>
          </div>
        </div>
        <div class="flex justify-center w-full pt-2">
          <button class="delete btn btn-ghost text-error btn-xs">Delete</button>
        </div>
      `;

      const titleInput: HTMLElement | null = proposalElement.querySelector(`#title-${uniqueId}`);
      const deleteButton: HTMLElement | null = proposalElement.querySelector(`#${uniqueId} .delete`);

      if (titleInput) {
        titleInput.addEventListener('input', (event: Event) => {
          // Logic to handle title input
          const inputElement = event.target as HTMLInputElement;
          console.log(`Title Updated: ${inputElement.value}`);
        });
      }

      if (deleteButton) {
        deleteButton.addEventListener('click', () => {
          proposalsContainer.removeChild(proposalElement);
        });
      }

      proposalsContainer.appendChild(proposalElement);
      proposalCount++;
    });
  }

</script>
