---
import { createProposalElement } from '@utils/createProposalElement';
import { exampleProposals } from '@utils/exampleProposals';
import { Translator } from '@utils/i18n.js';
import IProposal from '@interfaces/IProposal';

const locale = Astro.currentLocale || 'en';
const dropdownOptions = await exampleProposals(locale);

const translator = new Translator(Astro.currentLocale || 'en');
await translator.init();


interface Props {
    processId?: string;
    proposals: Array<IProposal>;
    isSetup?: boolean;
}

const { processId, proposals, isSetup } = Astro.props;
---

<div>
  <div id="proposals-container" data-is-setup={(isSetup || false).toString()} data-process={processId}>
    {(proposals.length > 0) && (
      proposals.map((proposal: any) => (
      <Fragment set:html={createProposalElement(proposal.id, proposal.title, proposal.description || '', isSetup)} />

    )))}
  </div>
  {proposals.length === 0 && (
    <p id="no-proposals-text">{translator.t('noProposalsFound')}</p>
  )}

 
  <div class="flex items-center flex-wrap justify-center w-full">
    <button id="add-button" class="btn p-2">{translator.t('addProposal')}</button>
    <div class="dropdown">
      <div tabindex={0} role="button" class="btn m-1">{translator.t('addProposalTemplate')}</div>
      <ul tabindex={0} class="dropdown-content menu p-2 shadow rounded-box z-[1]">
        {dropdownOptions.map((option, index) => (
          <li>
            <a class="flex flex-col">
              <b class="title">{option.title}</b>
              <p class="description">{option.description.ops[0].insert}</p>
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>
</div>
<script>
import { createQuill, updateQuill } from '@utils/quillUtils';
/* @ts-ignore */
import { v4 as uuidv4 } from 'uuid';
import { createProposalElement } from '@utils/createProposalElement';
import { initializeQuill, insertNewProposal, setupButtonListeners } from '@utils/proposalHelpers';

const addButton: HTMLElement | null = document.getElementById('add-button');
const proposalsContainer: HTMLElement = document.getElementById('proposals-container') as HTMLElement;
const noProposalsText = document.getElementById('no-proposals-text');

console.log(noProposalsText, proposalsContainer)
if (proposalsContainer) {
  const isSetup: boolean = proposalsContainer?.dataset.isSetup === 'true';
  const processId = proposalsContainer ? proposalsContainer.dataset.process || '' : '';

  if (addButton) {
    const proposalElements = proposalsContainer.children;

    for (let i = 0; i < proposalElements.length; i++) {
      const proposalElement = proposalElements[i];
      setupButtonListeners(proposalElement, proposalsContainer, processId, noProposalsText);
      initializeQuill(proposalElement, proposalElement.id);

      const flexElement = proposalElement.querySelector('.flex') as HTMLElement;
      if (flexElement) {
        const descriptionDiv: HTMLElement | null = proposalElement.querySelector(`#description-${flexElement.id}`);
        const quillOpsInput: HTMLInputElement | null = proposalElement.querySelector(`#quillops-${flexElement.id}`);

        if (descriptionDiv && quillOpsInput) {
          const quillEditor = createQuill(`#description-${flexElement.id}`);

          if (quillOpsInput.value) {
            try {
              const quillOps = JSON.parse(quillOpsInput.value);
              updateQuill(quillEditor, quillOps);
            } catch (error) {
              console.error('Error parsing quillops:', error);
            }
          }

          quillEditor.on('text-change', () => {
            /* @ts-ignore */
            quillOpsInput.value = JSON.stringify(quillEditor.editor.delta);
          });
        }
      }
    }

    addButton.addEventListener('click', () => {
      const uniqueId: string = uuidv4();
      console.log('hi im going to add')

      const proposalElement = createProposalElement(uniqueId, '', '', isSetup);

      insertNewProposal(proposalElement, proposalsContainer, processId, noProposalsText);
    });
  }

  const dropdownOptionsElements = document.querySelectorAll('.dropdown-content a');

  dropdownOptionsElements.forEach((dropdownOptionElement: Element) => {
    dropdownOptionElement.addEventListener('click', () => {
      const selectedTemplateTitle = dropdownOptionElement.querySelector('.title')?.textContent || '';
      const selectedTemplateDescription = dropdownOptionElement.querySelector('.description')?.textContent || '';

      const uniqueId = uuidv4();

      const proposalElement = createProposalElement(uniqueId, selectedTemplateTitle, selectedTemplateDescription, isSetup);
      insertNewProposal(proposalElement, proposalsContainer, processId, noProposalsText);
    });
  });
  if (processId) {
    const eventSource = new EventSource(`/api/process/${processId}/proposals`);
    eventSource.onmessage = (event) => {
      const proposals = JSON.parse(event.data);

      proposalsContainer.innerHTML = '';
      if (!proposals || Object.keys(proposals).length === 0) {
        if (noProposalsText) {
          noProposalsText.style.display = 'block';
        }
      } else {
        if (noProposalsText) {
          noProposalsText.style.display = 'none';
        }

        for (const proposalId in proposals) {
          const proposal = proposals[proposalId];
          const proposalElement = createProposalElement(proposalId, proposal.title, proposal.description || '', isSetup);
          proposalsContainer.insertAdjacentHTML('beforeend', proposalElement);
          const newProposalElement = proposalsContainer.lastElementChild as HTMLElement;
          setupButtonListeners(newProposalElement, proposalsContainer, processId, noProposalsText);
          initializeQuill(newProposalElement, proposalId);
        }
      }
    };
  }
}
</script>