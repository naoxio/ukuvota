---
import DatetimePicker from '@components/datetime/DatetimePicker.astro';
import DatetimeSlider from '@components/datetime/DatetimeSlider.astro';
import { t } from 'astro-i18n';

interface Props {
    phase: string;
    startMinDate: Date;
    startDate: Date;
    endDate: Date;
}

const { phase, startDate, endDate, startMinDate } = Astro.props;
const startPickerId = `start-date-picker-${phase}`;
const endPickerId = `end-date-picker-${phase}`;
const title = t(`phases.${phase}.title`);
const duration = (+ new Date(endDate) -  + new Date(startDate)) / 1000;
---

<time-selector data-phase={phase} data-start-picker-id={startPickerId} data-end-picker-id={endPickerId}>
  <h3 class="title">{ title }</h3>
  <h4>{ t(`phases.startAt`) }:</h4>
  <DatetimePicker phase={phase} index={0} date={startDate} min={startMinDate} id={startPickerId} />
  <h4>{ t(`phases.endsAt`) }:</h4>
  <DatetimePicker phase={phase} index={1} date={endDate} min={startDate} id={endPickerId} />
  <DatetimeSlider phase={phase} duration={duration}/>
  <br/>
</time-selector>

<script>
  import { sliderToDuration, durationToSlider } from "@utils/logslider";

  class TimeSelector extends HTMLElement {
    phase: string = this.getAttribute('data-phase') as string;
    startPickerId: string = this.getAttribute('data-start-picker-id') as string;
    endPickerId: string = this.getAttribute('data-end-picker-id') as string;
    startPicker: HTMLInputElement = document.getElementById(this.startPickerId)?.querySelector('input[type="datetime-local"]') as HTMLInputElement;
    endPicker: HTMLInputElement = document.getElementById(this.endPickerId)?.querySelector('input[type="datetime-local"]') as HTMLInputElement;
    durationSlider: HTMLInputElement = document.querySelector(`[data-phase='${this.phase}'] .range`) as HTMLInputElement;

    constructor() {
      super();
      this.initDatetimePickers();
      this.initDurationSlider();
    }

    initDurationSlider(): void {
      if (this.durationSlider) {
        this.durationSlider.addEventListener('input', (event: Event) => {
          const sliderValue = parseInt((event.target as HTMLInputElement).value, 10);
          const newDuration = sliderToDuration(sliderValue) * 60 * 1000; // Convert minutes to milliseconds
          const newEndDate = new Date(new Date(this.startPicker.value).getTime() + newDuration);
          this.endPicker.value = this.formatLocalDateTime(newEndDate);
        });
      }
    }
    initDatetimePickers() {
      
      if (this.startPicker && this.endPicker) {
        let originalStartDate = new Date(this.startPicker.value);
        let originalEndDate = new Date(this.endPicker.value);
        let originalDuration = originalEndDate.getTime() - originalStartDate.getTime();

        this.startPicker.addEventListener('change', (event: any) => {
          const newStartDate = new Date(event.target.value);
          if (isNaN(newStartDate.getTime())) return;
          
          const newEndDate = new Date(newStartDate.getTime() + originalDuration);
          this.endPicker.value = this.formatLocalDateTime(newEndDate);
          this.endPicker.min = this.formatLocalDateTime(newStartDate);
        });

        this.endPicker.addEventListener('change', (event: any) => {
          const newEndDate = new Date(event.target.value);
          if (isNaN(newEndDate.getTime())) return;

          originalEndDate = newEndDate;
          originalDuration = originalEndDate.getTime() - originalStartDate.getTime();
          originalStartDate = new Date(this.startPicker.value);
          this.updateDurationSlider();
        });
      }
    }
    updateDurationSlider(): void {
      if (this.durationSlider && this.startPicker && this.endPicker) {
        const newDuration = (+new Date(this.endPicker.value) - +new Date(this.startPicker.value)) / 1000; // Duration in seconds
        const sliderValue = durationToSlider(newDuration / 60); // Convert seconds to minutes for the slider
        this.durationSlider.value = sliderValue.toString();
      }
    }
    private formatLocalDateTime(date: Date): string {
      const offset: number = date.getTimezoneOffset() * 60000;
      const localISOTime: string = (new Date(date.getTime() - offset)).toISOString().slice(0, -1);
      return localISOTime.split('.')[0];
    }
  }

  customElements.define('time-selector', TimeSelector);
</script>
