---
import { Translator } from '@utils/i18n.js';

const translator = new Translator(Astro.currentLocale || 'en'); 
await translator.init();

interface Props {
    dates: [number , number]
    type: string
}

const { dates, type } = Astro.props;
---

<countdown-view data-dates={dates} data-type={type} data-done={translator.t('done')}>
  <span id="count"></span>
</countdown-view>

<script>
  /*
  import { fmtDuration } from '@utils/dateHelpers';
  const timeUnits = ['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds']
  
  class Countdown extends HTMLElement {
    count = this.querySelector('#count') as HTMLElement
    dates = [];
    targetDate = Date.now();
    currentDate = Date.now();
    type = this.dataset.type;


    get filteredUnits() {
      const diff = this.targetDate - this.currentDate;
      return diff > 86400000
        ? timeUnits.filter((v) => v !== 'seconds' && v !== 'minutes' && v !== 'hours')
        : diff > 3600000
        ? timeUnits.filter((v) => v !== 'seconds')
        : timeUnits;
    }
    updateTime() {
      this.currentDate = this.dates[0] < +new Date() ? +new Date() : this.dates[0];

      if (this.targetDate > this.currentDate) {
        const units = this.filteredUnits;
        this.count.innerHTML = fmtDuration(this.targetDate, this.currentDate, units);
        if (this.type === 'warning' && (this.targetDate - this.currentDate) > 300000) {
          this.count.classList.add('link-warning');
        } else if (this.type === 'warning' && (this.targetDate - this.currentDate) <= 300000) {
          this.count.classList.add('text-error');
        } else if (this.type === 'success') {
          this.count.classList.add('link-success');
        }

        setTimeout(() => this.updateTime(), 1000);

      } else {
        this.count.classList = 'text-info';
        this.count.innerHTML = this.dataset.done;
      }

    }
    constructor() {
      super()
      this.dates = JSON.parse(`[${this.dataset.dates}]`)
      this.targetDate = this.dates[1]
      this.currentDate = +new Date()

      this.updateTime()
    }
  }
  customElements.define('countdown-view', Countdown)*/

</script>