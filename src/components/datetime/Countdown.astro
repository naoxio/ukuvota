---
import { Translator } from '@utils/i18n.js';

const translator = new Translator(Astro.currentLocale || 'en');


interface Props {
  dates: number[];
  type: string;
  timezone: string;
}

const { dates, type, timezone } = Astro.props;
---
<countdown-view data-dates={dates} data-type={type} data-done={translator.t('done')} data-timezone={timezone}>
  <span id="count"></span>
</countdown-view>

<script>
import { formatDuration } from '@utils/dateUtils';

class Countdown extends HTMLElement {
  count = this.querySelector('#count') as HTMLElement;
  dates = [];
  targetDate = 0;
  currentDate = 0;
  type = this.dataset.type;
  timezone = this.dataset.timezone || 'UTC';

  updateTime() {
    this.currentDate = new Date().getTime();  // Current time in UTC
    if (this.targetDate > this.currentDate) {
      const diff = this.targetDate - this.currentDate;
      const duration = formatDuration(diff / 1000);
      this.count.innerHTML = duration;

      if (this.type === 'warning' && diff > 300000) {
        this.count.classList.add('link-warning');
      } else if (this.type === 'warning' && diff <= 300000) {
        this.count.classList.add('text-error');
      } else if (this.type === 'success') {
        this.count.classList.add('link-success');
      }

      setTimeout(() => this.updateTime(), 1000);
    } else {
      this.count.classList.add('text-info');
      this.count.innerHTML = this.dataset.done || '';
    }
  }

  constructor() {
    super();
    this.dates = JSON.parse(`[${this.dataset.dates}]`);
    this.targetDate = new Date(this.dates[1]).getTime(); // Target time as UTC
    this.updateTime();
  }
}

customElements.define('countdown-view', Countdown);
</script>
