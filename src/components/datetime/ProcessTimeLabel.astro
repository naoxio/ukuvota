---
import { t } from 'astro-i18n'
import Countdown from '@components/datetime/Countdown.astro';

interface Props {
    phase: string,
    dates: number[]
}

const { phase, dates} = Astro.props;

---

<process-time-label data-start={dates[0]}>
    <span>{ t(`phases.${phase}.title`) }:&nbsp;</span>

    { 
        +new Date() < dates[0] ? (
            <br/>
            <span>{ t(`phases.start`) }:&nbsp;</span>
            <span id="start-date" class="link-success"></span>
            <br/>
            <span>{ t(`phases.lastFor`) }:&nbsp;</span>
            <!--Countdown type="success" dates={dates} /-->
        ) : +new Date() < dates[1] ? (
            <!--Countdown dates={dates} type="warning" /-->
            <span>&nbsp;({ () => t('remainingTime') })</span>
        ) : <span class="text-info">{ () => t('done') }</span>
    }
    <br/>

</process-time-label>

<script>
    /*
    import { fmt } from '@utils/dateHelpers'

    class ProcessTimeLabel extends HTMLElement {
        constructor() {
            super()
            const startDate = this.querySelector('span#start-date')
            if (startDate)
                startDate.innerHTML = fmt(new Date(Number(this.dataset.start)), 'PPPPpppp')

        }
    }
    customElements.define('process-time-label', ProcessTimeLabel)*/

</script>