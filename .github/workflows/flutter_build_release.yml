name: Android Build Release

on:
  push:
    tags:
      - '*'

env:
  FLUTTER_VERSION: '3.19.6'
  IS_PRERELEASE: ${{ startsWith(github.ref, 'refs/tags/') && 'false' || 'true' }}
  RELEASE_TAG: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || 'latest' }}

jobs:
  cancel:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  android:
    needs: cancel
    name: Build APK
    runs-on: ubuntu-latest
    env:
      FLUTTER_KEY_ALIAS: ${{ secrets.FLUTTER_KEY_ALIAS }}
      FLUTTER_KEY_PASSWORD: ${{ secrets.FLUTTER_KEY_PASSWORD }}
      FLUTTER_STORE_PASSWORD: ${{ secrets.FLUTTER_STORE_PASSWORD }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Flutter SDK and dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.pub-cache
            ~/.flutter
          key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install Firebase CLI
        run: |
          npm install -g firebase-tools
          dart pub global activate flutterfire_cli

      - name: Add google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/app/google-services.json

      - name: Create firebase_options.dart for Android
        run: |
          cat <<EOF > lib/firebase_options.dart
          // File generated by CI.
          // ignore_for_file: type=lint
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart'
              show defaultTargetPlatform, TargetPlatform;

          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return FirebaseOptions(
                    apiKey: '${{ secrets.ANDROID_API_KEY }}',
                    appId: '${{ secrets.ANDROID_APP_ID }}',
                    messagingSenderId: '${{ secrets.ANDROID_SENDER_ID }}',
                    projectId: '${{ secrets.ANDROID_PROJECT_ID }}',
                    authDomain: '${{ secrets.ANDROID_AUTH_DOMAIN }}',
                    databaseURL: '${{ secrets.ANDROID_DATABASE_URL }}',
                    storageBucket: '${{ secrets.ANDROID_STORAGE_BUCKET }}',
                  );
                default:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions are not supported for this platform.',
                  );
              }
            }
          }
          EOF
        env:
          ANDROID_API_KEY: ${{ secrets.ANDROID_API_KEY }}
          ANDROID_APP_ID: ${{ secrets.ANDROID_APP_ID }}
          ANDROID_SENDER_ID: ${{ secrets.ANDROID_SENDER_ID }}
          ANDROID_PROJECT_ID: ${{ secrets.ANDROID_PROJECT_ID }}
          ANDROID_AUTH_DOMAIN: ${{ secrets.ANDROID_AUTH_DOMAIN }}
          ANDROID_DATABASE_URL: ${{ secrets.ANDROID_DATABASE_URL }}
          ANDROID_STORAGE_BUCKET: ${{ secrets.ANDROID_STORAGE_BUCKET }}

      - name: Install Dependencies
        run: flutter pub get

      - name: Generate locales
        run: flutter gen-l10n

      - name: Decode Keystore
        run: echo "${{ secrets.FLUTTER_STORE_FILE }}" | base64 -d > android/app/release-key.jks

      - name: Build APKs
        run: flutter build apk --release --target-platform=android-arm64,android-arm,android-x64 --split-per-abi

      - name: Rename APKs and Append Version
        run: |
          mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk build/app/outputs/flutter-apk/Ukuvota_arm64-v8a_${{ env.RELEASE_TAG }}.apk
          mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk build/app/outputs/flutter-apk/Ukuvota_armeabi-v7a_${{ env.RELEASE_TAG }}.apk
          mv build/app/outputs/flutter-apk/app-x86_64-release.apk build/app/outputs/flutter-apk/Ukuvota_x86_64_${{ env.RELEASE_TAG }}.apk

      - name: Upload APKs as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: apk-artifacts
          path: |
            build/app/outputs/flutter-apk/Ukuvota_arm64-v8a_${{ env.RELEASE_TAG }}.apk
            build/app/outputs/flutter-apk/Ukuvota_armeabi-v7a_${{ env.RELEASE_TAG }}.apk
            build/app/outputs/flutter-apk/Ukuvota_x86_64_${{ env.RELEASE_TAG }}.apk

  release:
    name: Release Builds
    needs: android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download APK Artifact
        uses: actions/download-artifact@v2
        with:
          name: apk-artifacts
          path: build/app/outputs/flutter-apk/

      - name: Create Release and Upload Builds
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.RELEASE_TAG }}"
          prerelease: "${{ env.IS_PRERELEASE }}"
          title: "${{ env.RELEASE_TAG }}"
          files: |
            build/app/outputs/flutter-apk/Ukuvota_arm64-v8a_${{ env.RELEASE_TAG }}.apk
            build/app/outputs/flutter-apk/Ukuvota_armeabi-v7a_${{ env.RELEASE_TAG }}.apk
            build/app/outputs/flutter-apk/Ukuvota_x86_64_${{ env.RELEASE_TAG }}.apk
